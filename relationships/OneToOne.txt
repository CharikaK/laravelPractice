One to One
A one-to-one relationship is a very basic type of database relationship. A User has ONE phone. The Phone is BELONGSTO a user.

User 
User Model and the migration files are already exist

Migrate fresh to create the user table
php artisan migrate:fresh 

Now add fake users to the table
- make the factory files - factory sets the rules for the table fields
php artisan make:factory UserFactory --model=User

- make the UserTableSeeder
php artisan make:seed UserTableSeeder
in run() add 'User::factory()->count(3)->create();'

- seed into the table
php artisan db:seed --class=UserTableSeeder

-----------------------------------------------------------------------------
Phone
create Phone model, migration, factory and seeder files
$ php artisan make:model Phone -mfs

edit phone model with mass assignment

edit the migration file with additional fields

migrate all the files
php artisan migrate:fresh

phone factory
- create faker custom array of phone names and let Laravel pick names randomly
  when creating records

seeder
- create records

seeding - this can be done is two ways
1 - 
    Edit DatabaseSeeder run() as in example
    php artisan db:seed

2 - 
    Edit PhoneSeeder run()
    php artisan db:seed --class=PhoneSeeder

-----------------------------------------------------------------------------
View all the users
Refer Web.php
Refer index.blade.php

-----------------------------------------------------------------------------
Inserting fake data into tables.
Relationship
   - Phone table has a FK user_id. This is to create the relationship between user and the phone tables.
   - when inserting data to phone table Laravel has to get user_id to build the relationship

Foreign Key in PhoneFactory
  - PhoneFactory must have rules defined when running the PhoneSeeder.
  - Refer PhoneFactory definition() to find ' 'user_id'=>\App\Models\User::factory()->create()->id // Relationship maintenance'

Seeding both tables with fake data
php artisan migrate:fresh - Remove all data 
php artisan db:seed - insert new records to both. Running DatabaseSeeder

OR

Seeding just the phone pulling existing user data
php artisan db:seed --class=PhoneSeeder

OR
Refer Web.php Route::get('/phone') for manual insert
-----------------------------------------------------------------------------
Defining the Relationship

User.php
phone() - return $this->hasOne(Phone::class,'user_id','id');

Phone.php
user() - return $this->belongsTo(User::class,'id','id');

Web.php - $users = User::all();

index.blade.php - <p>{{ $user->phone['name']}}</p>
